package com.adobe.aem.guides.wknd.core.listeners;

import java.util.HashMap;

import org.apache.felix.scr.annotations.Component;
import org.apache.felix.scr.annotations.Property;
import org.apache.felix.scr.annotations.Reference;
import org.apache.felix.scr.annotations.Service;
import org.apache.sling.event.jobs.JobManager;
import org.osgi.service.event.Event;
import org.osgi.service.event.EventHandler;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.day.cq.replication.ReplicationAction;
import com.day.cq.replication.ReplicationActionType;

/**
 * When user activates any page this event handler will get triggered because of
 * event topic property. Upon page activation job will get triggered. You need
 * to write job consumer (ReplicationLogger) to process the job.
 * 
 * @author shrikant.kumkar
 *
 */
@Component(immediate = true)
@Service(value = EventHandler.class)
@Property(name = "event.topics", value = ReplicationAction.EVENT_TOPIC)
public class ReplicationListener implements EventHandler {
	private final Logger logger = LoggerFactory.getLogger(getClass());

	// dictates to the JobManager which JobConsumer will be instantiated in line 42
	private static final String TOPIC = "com/adobe/wknd/core/replicationjob";

	@Reference
	private JobManager jobManager;

	@Override
	public void handleEvent(Event event) {
		ReplicationAction action = ReplicationAction.fromEvent(event);
		// when page is activated do below
		if (action.getType().equals(ReplicationActionType.ACTIVATE)) {
			if (action.getPath() != null) {
				try {
					// Create a properties map that contains things we want to pass through the job
					HashMap<String, Object> jobprops = new HashMap<String, Object>();
					jobprops.put("PAGE_PATH", action.getPath());
					// Add the job to queue with TOPIC, event handler doesn't know about processing
					// of below job
					jobManager.addJob(TOPIC, jobprops);

					// this is printed when page is activated
					logger.info("=============Topic: '" + TOPIC + "' with payload: '" + action.getPath()
							+ "' was added to the Job Manager");

				} catch (Exception e) {
					logger.error("============= ERROR CREATING JOB : NO PAYLOAD WAS DEFINED");
					e.printStackTrace();
				}
			}
		}
	}

}